import fs from 'fs';
import path from 'path';
import { DOMParser } from 'xmldom';
import { fileURLToPath } from 'url';

/**
 * Konwertuje plik JUnit XML na raport HTML
 * @param {string} xmlFilePath - Ścieżka do pliku XML
 * @param {string} outputHtmlPath - Ścieżka do pliku wyjściowego HTML
 */
function convertJUnitXmlToHtml(xmlFilePath, outputHtmlPath) {
  try {
    // Wczytaj zawartość pliku XML
    const xmlContent = fs.readFileSync(xmlFilePath, 'utf-8');
    
    // Parsuj XML
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');
    
    // Pobierz informacje o testach
    const testsuites = xmlDoc.getElementsByTagName('testsuites')[0];
    const testsuite = xmlDoc.getElementsByTagName('testsuite')[0];
    
    if (!testsuite) {
      throw new Error('Nie znaleziono elementu testsuite w pliku XML');
    }
    
    // Pobierz atrybuty testsuite
    const suiteName = testsuite.getAttribute('name') || 'Nieznana symulacja';
    const totalTests = parseInt(testsuite.getAttribute('tests') || '0', 10);
    const failures = parseInt(testsuite.getAttribute('failures') || '0', 10);
    const errors = parseInt(testsuite.getAttribute('errors') || '0', 10);
    const skipped = parseInt(testsuite.getAttribute('skipped') || '0', 10);
    const timestamp = testsuite.getAttribute('timestamp') || new Date().toISOString();
    const time = parseFloat(testsuite.getAttribute('time') || '0');
    
    // Pobierz właściwości
    const properties = {};
    const propertyNodes = testsuite.getElementsByTagName('property');
    for (let i = 0; i < propertyNodes.length; i++) {
      const property = propertyNodes[i];
      const name = property.getAttribute('name');
      const value = property.getAttribute('value');
      if (name && value) {
        properties[name] = value;
      }
    }
    
    // Pobierz testcases
    const testcases = [];
    const testcaseNodes = testsuite.getElementsByTagName('testcase');
    for (let i = 0; i < testcaseNodes.length; i++) {
      const testcase = testcaseNodes[i];
      const className = testcase.getAttribute('classname') || '';
      const name = testcase.getAttribute('name') || 'Nieznany test';
      const time = parseFloat(testcase.getAttribute('time') || '0');
      
      // Sprawdź, czy test zakończył się niepowodzeniem
      const failureNodes = testcase.getElementsByTagName('failure');
      const hasFailure = failureNodes.length > 0;
      let failureMessage = '';
      let failureType = '';
      let failureContent = '';
      
      if (hasFailure) {
        const failure = failureNodes[0];
        failureMessage = failure.getAttribute('message') || '';
        failureType = failure.getAttribute('type') || '';
        failureContent = failure.textContent || '';
      }
      
      // Pobierz system-out
      const systemOutNodes = testcase.getElementsByTagName('system-out');
      let systemOut = '';
      if (systemOutNodes.length > 0) {
        systemOut = systemOutNodes[0].textContent || '';
      }
      
      // Dodaj testcase do listy
      testcases.push({
        className,
        name,
        time,
        hasFailure,
        failureMessage,
        failureType,
        failureContent,
        systemOut
      });
    }
    
    // Generuj HTML
    const html = generateHtml(suiteName, totalTests, failures, errors, skipped, timestamp, time, properties, testcases, xmlContent);
    
    // Zapisz HTML do pliku
    fs.writeFileSync(outputHtmlPath, html);
    console.log(`Raport HTML został zapisany do pliku: ${outputHtmlPath}`);
    
  } catch (error) {
    console.error('Wystąpił błąd podczas konwersji:', error);
  }
}

/**
 * Generuje kod HTML raportu
 * @param {string} suiteName - Nazwa testsuite
 * @param {number} totalTests - Liczba testów
 * @param {number} failures - Liczba niepowodzeń
 * @param {number} errors - Liczba błędów
 * @param {number} skipped - Liczba pominiętych testów
 * @param {string} timestamp - Znacznik czasu
 * @param {number} time - Czas wykonania
 * @param {Object} properties - Właściwości
 * @param {Array} testcases - Testcases
 * @param {string} xmlContent - Zawartość pliku XML
 * @returns {string} - Kod HTML
 */
function generateHtml(suiteName, totalTests, failures, errors, skipped, timestamp, time, properties, testcases, xmlContent) {
  // Oblicz statystyki
  const passed = totalTests - failures - errors - skipped;
  const successRate = totalTests > 0 ? (passed / totalTests * 100).toFixed(2) : '0.00';
  
  // Przygotuj dane do wykresów
  const passFailData = [
    { label: 'Udane', value: passed, color: '#4CAF50' },
    { label: 'Nieudane', value: failures, color: '#F44336' },
    { label: 'Błędy', value: errors, color: '#FF9800' },
    { label: 'Pominięte', value: skipped, color: '#9E9E9E' }
  ];
  
  // Przygotuj dane o czasach odpowiedzi
  const responseTimeData = testcases
    .filter(tc => !tc.className.includes('Summary')) // Filtruj podsumowanie
    .map(tc => ({
      name: tc.name,
      time: tc.time * 1000, // Konwersja na ms
      color: tc.hasFailure ? '#F44336' : '#4CAF50'
    }))
    .sort((a, b) => b.time - a.time); // Sortuj malejąco
  
  // Znajdź globalny testcase
  const globalTestCase = testcases.find(tc => tc.className.includes('Global'));
  
  // Przygotuj dane o percentylach (jeśli dostępne)
  let percentileData = [];
  if (globalTestCase && globalTestCase.systemOut) {
    const percentileRegex = /(\d+)th percentile.*?: (\d+)/g;
    let match;
    while ((match = percentileRegex.exec(globalTestCase.systemOut)) !== null) {
      percentileData.push({
        percentile: match[1],
        value: parseInt(match[2], 10)
      });
    }
    percentileData.sort((a, b) => parseInt(a.percentile, 10) - parseInt(b.percentile, 10));
  }
  
  // Generuj HTML
  return `<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Raport testów wydajnościowych - ${suiteName}</title>
  <style>
    :root {
      --primary-color: #2196F3;
      --success-color: #4CAF50;
      --warning-color: #FF9800;
      --error-color: #F44336;
      --text-color: #333;
      --background-color: #f5f5f5;
      --card-background: #fff;
      --border-color: #ddd;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: var(--text-color);
      background-color: var(--background-color);
      margin: 0;
      padding: 20px;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    header {
      text-align: center;
      margin-bottom: 30px;
    }
    
    h1, h2, h3 {
      color: var(--primary-color);
    }
    
    .card {
      background-color: var(--card-background);
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin-bottom: 20px;
      padding: 20px;
    }
    
    .summary {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .summary-item {
      flex: 1;
      min-width: 200px;
      padding: 15px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .summary-item.success {
      background-color: var(--success-color);
      color: white;
    }
    
    .summary-item.error {
      background-color: var(--error-color);
      color: white;
    }
    
    .summary-item.warning {
      background-color: var(--warning-color);
      color: white;
    }
    
    .summary-item.info {
      background-color: var(--primary-color);
      color: white;
    }
    
    .properties-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    
    .properties-table th, .properties-table td {
      padding: 12px 15px;
      border-bottom: 1px solid var(--border-color);
      text-align: left;
    }
    
    .properties-table th {
      background-color: var(--primary-color);
      color: white;
    }
    
    .properties-table tr:nth-child(even) {
      background-color: rgba(0,0,0,0.02);
    }
    
    .chart-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .chart {
      flex: 1;
      min-width: 300px;
      height: 300px;
      background-color: var(--card-background);
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 20px;
    }
    
    .testcase {
      margin-bottom: 10px;
      padding: 15px;
      border-radius: 8px;
      background-color: var(--card-background);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .testcase-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }
    
    .testcase-name {
      font-weight: bold;
      flex-grow: 1;
    }
    
    .testcase-time {
      margin-left: 10px;
    }
    
    .testcase-status {
      padding: 5px 10px;
      border-radius: 4px;
      margin-left: 10px;
    }
    
    .testcase-status.success {
      background-color: var(--success-color);
      color: white;
    }
    
    .testcase-status.failure {
      background-color: var(--error-color);
      color: white;
    }
    
    .testcase-details {
      margin-top: 15px;
      padding: 15px;
      background-color: rgba(0,0,0,0.02);
      border-radius: 4px;
      white-space: pre-wrap;
      font-family: monospace;
      display: none;
    }
    
    .testcase.expanded .testcase-details {
      display: block;
    }
    
    .toggle-button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.2em;
      color: var(--primary-color);
    }
    
    .search-container {
      margin-bottom: 20px;
    }
    
    #searchInput {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      font-size: 16px;
    }
    
    .tabs {
      display: flex;
      margin-bottom: 20px;
      border-bottom: 1px solid var(--border-color);
    }
    
    .tab {
      padding: 10px 20px;
      cursor: pointer;
      border: 1px solid transparent;
      border-bottom: none;
      border-radius: 4px 4px 0 0;
      margin-right: 5px;
    }
    
    .tab.active {
      background-color: var(--card-background);
      border-color: var(--border-color);
      border-bottom-color: var(--card-background);
      margin-bottom: -1px;
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    @media (max-width: 768px) {
      .summary {
        flex-direction: column;
      }
      
      .chart {
        min-width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Raport testów wydajnościowych</h1>
      <h2>${suiteName}</h2>
      <p>Data: ${new Date(timestamp).toLocaleString()}</p>
    </header>
    
    <div class="tabs">
      <div class="tab active" data-tab="summary">Podsumowanie</div>
      <div class="tab" data-tab="details">Szczegóły testów</div>
      <div class="tab" data-tab="charts">Wykresy</div>
      <div class="tab" data-tab="raw">Surowe dane</div>
    </div>
    
    <div id="summary" class="tab-content active">
      <div class="card">
        <h3>Podsumowanie testów</h3>
        <div class="summary">
          <div class="summary-item info">
            <h3>Wszystkie testy</h3>
            <p>${totalTests}</p>
          </div>
          <div class="summary-item success">
            <h3>Udane</h3>
            <p>${passed}</p>
          </div>
          <div class="summary-item error">
            <h3>Nieudane</h3>
            <p>${failures}</p>
          </div>
          <div class="summary-item warning">
            <h3>Współczynnik sukcesu</h3>
            <p>${successRate}%</p>
          </div>
          <div class="summary-item info">
            <h3>Czas wykonania</h3>
            <p>${time.toFixed(2)} s</p>
          </div>
        </div>
      </div>
      
      <div class="card">
        <h3>Właściwości testu</h3>
        <table class="properties-table">
          <thead>
            <tr>
              <th>Właściwość</th>
              <th>Wartość</th>
            </tr>
          </thead>
          <tbody>
            ${Object.entries(properties).map(([key, value]) => `
              <tr>
                <td>${key}</td>
                <td>${value}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
      
      ${globalTestCase ? `
      <div class="card">
        <h3>Globalne statystyki</h3>
        <pre>${globalTestCase.systemOut.trim()}</pre>
      </div>
      ` : ''}
    </div>
    
    <div id="details" class="tab-content">
      <div class="search-container">
        <input type="text" id="searchInput" placeholder="Szukaj testów...">
      </div>
      
      <div class="testcases">
        ${testcases.map((testcase, index) => `
          <div class="testcase" data-name="${testcase.name}" data-classname="${testcase.className}">
            <div class="testcase-header" onclick="toggleTestCase(${index})">
              <div class="testcase-name">${testcase.name}</div>
              <div class="testcase-time">${(testcase.time * 1000).toFixed(2)} ms</div>
              <div class="testcase-status ${testcase.hasFailure ? 'failure' : 'success'}">${testcase.hasFailure ? 'Nieudany' : 'Udany'}</div>
              <button class="toggle-button" id="toggle-${index}">+</button>
            </div>
            <div class="testcase-details">
              <p><strong>Klasa:</strong> ${testcase.className}</p>
              <p><strong>Czas wykonania:</strong> ${(testcase.time * 1000).toFixed(2)} ms</p>
              ${testcase.hasFailure ? `
                <p><strong>Komunikat błędu:</strong> ${testcase.failureMessage}</p>
                <p><strong>Typ błędu:</strong> ${testcase.failureType}</p>
                <pre>${testcase.failureContent.trim()}</pre>
              ` : ''}
              <p><strong>Szczegóły:</strong></p>
              <pre>${testcase.systemOut.trim()}</pre>
            </div>
          </div>
        `).join('')}
      </div>
    </div>
    
    <div id="charts" class="tab-content">
      <div class="chart-container">
        <div class="chart">
          <h3>Status testów</h3>
          <canvas id="statusChart"></canvas>
        </div>
        
        <div class="chart">
          <h3>Czasy odpowiedzi (Top 10)</h3>
          <canvas id="responseTimeChart"></canvas>
        </div>
      </div>
      
      ${percentileData.length > 0 ? `
      <div class="chart-container">
        <div class="chart">
          <h3>Percentyle czasów odpowiedzi</h3>
          <canvas id="percentileChart"></canvas>
        </div>
      </div>
      ` : ''}
    </div>
    
    <div id="raw" class="tab-content">
      <div class="card">
        <h3>Surowe dane XML</h3>
        <pre style="overflow-x: auto;">${escapeHtml(xmlContent)}</pre>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Funkcja do przełączania widoczności szczegółów testcase
    function toggleTestCase(index) {
      const testcase = document.querySelectorAll('.testcase')[index];
      const toggleButton = document.getElementById('toggle-' + index);
      
      testcase.classList.toggle('expanded');
      toggleButton.textContent = testcase.classList.contains('expanded') ? '-' : '+';
    }
    
    // Funkcja do filtrowania testcases
    document.getElementById('searchInput').addEventListener('input', function(e) {
      const searchTerm = e.target.value.toLowerCase();
      const testcases = document.querySelectorAll('.testcase');
      
      testcases.forEach(testcase => {
        const name = testcase.getAttribute('data-name').toLowerCase();
        const className = testcase.getAttribute('data-classname').toLowerCase();
        
        if (name.includes(searchTerm) || className.includes(searchTerm)) {
          testcase.style.display = '';
        } else {
          testcase.style.display = 'none';
        }
      });
    });
    
    // Obsługa zakładek
    document.querySelectorAll('.tab').forEach(tab => {
      tab.addEventListener('click', function() {
        // Usuń klasę active ze wszystkich zakładek i zawartości
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        
        // Dodaj klasę active do klikniętej zakładki
        this.classList.add('active');
        
        // Pokaż odpowiednią zawartość
        const tabId = this.getAttribute('data-tab');
        document.getElementById(tabId).classList.add('active');
      });
    });
    
    // Dane do wykresów
    const passFailData = ${JSON.stringify(passFailData)};
    const responseTimeData = ${JSON.stringify(responseTimeData.slice(0, 10))};
    const percentileData = ${JSON.stringify(percentileData)};
    
    // Inicjalizacja wykresów po załadowaniu strony
    window.addEventListener('load', function() {
      // Wykres statusu testów
      const statusCtx = document.getElementById('statusChart').getContext('2d');
      new Chart(statusCtx, {
        type: 'pie',
        data: {
          labels: passFailData.map(item => item.label),
          datasets: [{
            data: passFailData.map(item => item.value),
            backgroundColor: passFailData.map(item => item.color),
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
      
      // Wykres czasów odpowiedzi
      const responseTimeCtx = document.getElementById('responseTimeChart').getContext('2d');
      new Chart(responseTimeCtx, {
        type: 'bar',
        data: {
          labels: responseTimeData.map(item => item.name),
          datasets: [{
            label: 'Czas odpowiedzi (ms)',
            data: responseTimeData.map(item => item.time),
            backgroundColor: responseTimeData.map(item => item.color),
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'y',
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            x: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Czas (ms)'
              }
            }
          }
        }
      });
      
      // Wykres percentyli (jeśli dostępne)
      if (percentileData.length > 0) {
        const percentileCtx = document.getElementById('percentileChart').getContext('2d');
        new Chart(percentileCtx, {
          type: 'line',
          data: {
            labels: percentileData.map(item => item.percentile + '%'),
            datasets: [{
              label: 'Czas odpowiedzi (ms)',
              data: percentileData.map(item => item.value),
              backgroundColor: 'rgba(33, 150, 243, 0.2)',
              borderColor: 'rgba(33, 150, 243, 1)',
              borderWidth: 2,
              pointBackgroundColor: 'rgba(33, 150, 243, 1)',
              tension: 0.1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'bottom'
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'Czas (ms)'
                }
              }
            }
          }
        });
      }
    });
  </script>
</body>
</html>`;
}

/**
 * Escapuje znaki HTML
 * @param {string} text - Tekst do escapowania
 * @returns {string} - Escapowany tekst
 */
function escapeHtml(text) {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * Główna funkcja programu
 */
function main() {
  const args = process.argv.slice(2);
  
  if (args.length < 1) {
    console.log("Użycie: node junit_to_html.mjs <plik_junit.xml> [plik_wyjściowy.html]");
    process.exit(1);
  }
  
  const xmlFilePath = args[0];
  const outputHtmlPath = args.length > 1 ? args[1] : xmlFilePath.replace(/\.xml$/, '.html');
  
  if (!fs.existsSync(xmlFilePath)) {
    console.error(`Błąd: Plik ${xmlFilePath} nie istnieje.`);
    process.exit(1);
  }
  
  convertJUnitXmlToHtml(xmlFilePath, outputHtmlPath);
}

// Uruchomienie programu
main();
