# Dockerfile

# Stage 1: Builder - TYLKO DO INSTALACJI ZALEŻNOŚCI NPM (bez Node.js i Gatlinga)
# Używamy ubi8-minimal, bo to działa.
FROM registry.access.redhat.com/ubi8-minimal AS builder

USER root
# Instalacja narzędzi potrzebnych TYLKO do npm install
RUN microdnf update -y && \
    microdnf install -y \
    gcc gcc-c++ make automake autoconf libtool glibc-devel libstdc++-devel \
    # Node.js zostanie zainstalowany w builderze, więc nie potrzeba tu curl, tar, gzip, xz, ca-certificates, openssl
    && microdnf clean all && rm -rf /var/cache/yum/*

# Node.js jest tu instalowany ręcznie w builderze, bo npm install tego potrzebuje
ARG NODE_VERSION=18.20.1
ENV CFLAGS="-march=x86-64 -mtune=generic" \
    CXXFLAGS="-march=x86-64 -mtune=generic"
RUN curl -sSLk "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz" \
    | tar -xJC /usr/local --strip-components=1 && \
    chmod -R 755 /usr/local/bin/node /usr/local/lib/node_modules/npm /usr/local/lib/node_modules/corepack


# Argumenty i Etykiety z Twojego oryginalnego Dockerfile
ARG MICRODIR=/microdir
ARG PIP_ROOT_USER_ACTION=ignore
ARG LANG=en_US.UTF-8
ARG LANGUAGE=en_US.UTF-8
ARG LC_COLLATE=C
ARG LC_CTYPE=en_US.UTF-8
ARG NLS_OS_CHARSET=AL32UTF8
ARG USE_GCLOUD_AUTH_PLUGIN=True

LABEL maintainer="ci.coding.pl"

# Ustawienie zmiennych środowiskowych
ENV PIP_ROOT_USER_ACTION=${PIP_ROOT_USER_ACTION} \
    LANG=${LANG} \
    LANGUAGE=${LANGUAGE} \
    LC_COLLATE=${LC_COLLATE} \
    LC_CTYPE=${LC_CTYPE} \
    NLS_OS_CHARSET=${NLS_OS_CHARSET} \
    NODE_TLS_REJECT_UNAUTHORIZED=0

WORKDIR /opt/app-root/src

COPY package*.json ./

RUN npm config set strict-ssl false && \
    npm install --unsafe-perm

# Stage 2: Final - Tutaj będzie cała reszta, w tym instalacja Gatlinga
FROM registry.access.redhat.com/ubi8-minimal AS final # Bazujemy na ubi8-minimal

USER root
RUN mkdir -p /app && chown 1001:0 /app

# === KLUCZOWE ZMIANY: INSTALACJA NARZĘDZI I NODE.JS W ETAPIE FINAL ===
# Instalacja narzędzi potrzebnych do pobrania Node.js i Gatlinga
RUN microdnf update -y && \
    microdnf install -y \
    curl tar gzip xz unzip \
    ca-certificates openssl \
    # Te biblioteki są potrzebne, jeśli Node.js lub natywne moduły wymagają ich w runtime
    libstdc++-devel libgcc_s \
    && microdnf clean all && rm -rf /var/cache/yum/*

# Kopiowanie Node.js z buildera (już nie jest instalowane w builderze)
# Node.js jest teraz instalowane ręcznie w builderze, a potem kopiowane
COPY --from=builder /usr/local/ /usr/local/

# Ustawienie PATH (teraz Node.js i biblioteki są obecne)
ENV PATH="/usr/local/bin:${PATH}" 

# === NOWY KROK: POBIERANIE I INSTALOWANIE GATLING-JS-BUNDLE (W ETAPIE FINAL) ===
ARG GATLING_JS_VERSION=3.13.50 # <--- SPRAWDŹ DOKŁADNIE TĘ WERSJĘ W SWOIM package.json
ENV GATLING_JS_DOWNLOAD_URL="https://github.com/gatling/gatling-js/releases/download/v${GATLING_JS_VERSION}/gatling-js-bundle-${GATLING_JS_VERSION}-linux-x64.zip"

RUN echo "Downloading Gatling.js Bundle..." && \
    curl -sSLk "${GATLING_JS_DOWNLOAD_URL}" -o /tmp/gatling-js-bundle.zip && \
    echo "Verifying downloaded file..." && \
    ls -lh /tmp/gatling-js-bundle.zip && \
    file /tmp/gatling-js-bundle.zip && \
    unzip -t /tmp/gatling-js-bundle.zip || (echo "Downloaded ZIP is corrupted or not a ZIP file. Failing build." && exit 1) && \
    echo "Extracting Gatling.js Bundle..." && \
    unzip /tmp/gatling-js-bundle.zip -d /usr/local/lib/gatling-js-bundle && \
    chmod -R 755 /usr/local/lib/gatling-js-bundle && \
    rm /tmp/gatling-js-bundle.zip && \
    echo "Installing Gatling CLI..." && \
    npx gatling install
# === KONIEC NOWEGO KROKU ===

USER 1001
WORKDIR /app

COPY --from=builder /opt/app-root/src/node_modules ./node_modules
COPY --from=builder /opt/app-root/src/package.json .
COPY --from=builder /opt/app-root/src/sample.env .sample.env
COPY --from=builder /opt/app-root/src/. .

EXPOSE 3000

CMD ["/bin/bash", "-c", "npm run test"]
