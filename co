Opis / Cel

Celem tego zadania jest stworzenie nowego, kompletnego scenariusza testu wydajnościowego w Gatling/TypeScript, który symuluje krytyczny przepływ weryfikacji transakcji.

Scenariusz musi poprawnie obsłużyć zależności między endpointami, a mianowicie:

Pobranie Tokena Autoryzacyjnego (/token).

Inicjalizacja Kontekstu Sesji (/sessioncontext).

Weryfikacja Transakcji (/verify).

Test ma służyć do pomiaru wydajności w warunkach narastającego obciążenia.

Kryteria Akceptacji (Definition of Done - DoD)

[ ] Zdefiniowano nowy plik scenariusza verifyFlow.gatling.ts.

[ ] Zaimplementowano kroki: postAuthToken.ts, postSessionContext.ts, postVerify.ts i są one poprawnie połączone.

[ ] Token autoryzacyjny (accessToken) jest poprawnie zapisywany i używany w nagłówkach kolejnych zapytań.

[ ] Identyfikator sesji (sessionId) jest poprawnie zapisywany i używany w ciele zapytania /verify.

[ ] Symulacja wykorzystuje strategię Ramp-up i Constant Users (zgodnie z sekcją 4 poniżej).

[ ] Dodano weryfikację kodu statusu 200 i weryfikację logiki biznesowej (np. jsonPath('$.status').is('VERIFIED')) dla krytycznego kroku /verify.
