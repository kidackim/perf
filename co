# Dockerfile

# Stage 1: Builder - Bazujemy na ubi9-minimal
FROM registry.access.redhat.com/ubi9-minimal AS builder

USER root

# Instalacja niezbędnych narzędzi systemowych, W TYM 'ca-certificates' I 'openssl'
RUN microdnf update -y && \
    microdnf install -y \
    tar gzip \
    xz \
    gcc gcc-c++ make automake autoconf libtool glibc-devel libstdc++-devel \
    git sqlite \
    ca-certificates \
    openssl \ # <<< DODANO: Pakiet openssl
    && microdnf clean all && rm -rf /var/cache/yum/* # Upewnij się, że cache jest czyszczony

# Definicja wersji Node.js do zainstalowania
ARG NODE_VERSION=18.20.1 

# Flagi kompilatora dla kompatybilności z CPU
ENV CFLAGS="-march=x86-64 -mtune=generic" \
    CXXFLAGS="-march=x86-64 -mtune=generic"

# Argumenty i Etykiety z Twojego oryginalnego Dockerfile
ARG MICRODIR=/microdir
ARG PIP_ROOT_USER_ACTION=ignore
ARG LANG=en_US.UTF-8
ARG LANGUAGE=en_US.UTF-8
ARG LC_COLLATE=C
ARG LC_CTYPE=en_US.UTF-8
ARG NLS_OS_CHARSET=AL32UTF8
ARG USE_GCLOUD_AUTH_PLUGIN=True

LABEL maintainer="ci.coding.pl"

# Ustawienie zmiennych środowiskowych
ENV PIP_ROOT_USER_ACTION=${PIP_ROOT_USER_ACTION} \
    LANG=${LANG} \
    LANGUAGE=${LANGUAGE} \
    LC_COLLATE=${LC_COLLATE} \
    LC_CTYPE=${LC_CTYPE} \
    NLS_OS_CHARSET=${NLS_OS_CHARSET} \
    NODE_TLS_REJECT_UNAUTHORIZED=0

# === Ręczna instalacja Node.js ===
# Spróbuj najpierw BEZ '-k'. Jeśli nadal SSL Error 60, dodaj '-k' do diagnozy.
RUN curl -sSL "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz" \
    | tar -xJC /usr/local --strip-components=1 && \
    chmod -R 755 /usr/local/bin/node /usr/local/lib/node_modules/npm /usr/local/lib/node_modules/corepack

# Ustawienie katalogu roboczego dla kodu aplikacji
WORKDIR /opt/app-root/src

# Skopiowanie plików package.json i package-lock.json (lub yarn.lock)
COPY package*.json ./

# Instalacja zależności Node.js
RUN npm config set strict-ssl false && \
    npm install --unsafe-perm

# Skopiowanie pozostałego kodu źródłowego aplikacji
COPY . .

# Stage 2: Final - minimalny obraz do uruchomienia aplikacji
FROM registry.access.redhat.com/ubi9-micro:latest AS final

# Ustawienie użytkownika i katalogu aplikacji
USER root
RUN mkdir -p /app && chown 1001:0 /app
USER 1001

WORKDIR /app

# Kopiowanie zbudowanych artefaktów i zależności z etapu 'builder'
COPY --from=builder /opt/app-root/src/node_modules ./node_modules
COPY --from=builder /opt/app-root/src/package.json .
COPY --from=builder /opt/app-root/src/sample.env .sample.env
COPY --from=builder /opt/app-root/src/. .

# Wystawienie portu, na którym nasłuchuje aplikacja
EXPOSE 3000

# Komenda uruchomienia aplikacji
CMD ["/bin/bash", "-c", "npm run test"]
