const extractDevHashForSuspendedCustomer = (responseBody) => {
    const devHashes = responseBody.data.wallets.apple.digitizeddevsForEach;

    // Użycie map i find lub prostszej iteracji dla "mistrzowskiego" JS
    const suspendedDev = devHashes.find(dev => 
        dev.digitizeddev.availableOperations.indexOf('TOKPER_SUSPEND_CUST') !== -1
    );

    return suspendedDev ? suspendedDev.digitizeddev.devHash : null;
};

cy.lolekGetTokensInfo(authToken)
        .then((response) => {
            // Asercja 1: Status API
            expect(response.status).to.eq(200, 'API call should return status 200');
            // Asercja 2: Status Logiczny
            expect(response.body.status).to.eq('OK', 'Response body status should be OK');

            // 1. Ekstrakcja Hasha za pomocą czystej funkcji
            const devHashReady = extractDevHashForSuspendedCustomer(response.body);

            // 2. Asercja: Hash powinien zostać znaleziony
            expect(devHashReady).to.be.a('string').and.not.be.empty;

            // 3. Aliasing i przygotowanie do kolejnego kroku (jeśli jest potrzebny)
            cy.wrap(devHashReady).as('suspendedDevHash');
        });
