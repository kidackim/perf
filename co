const LOGIN_USER = '89002077';
const LOGIN_PASS = 'BSHGQU9d7mCY1yNzH';
const RENGWEB_URL = 'https://hce-u.pl.ing-ad/'; // Upewnij się, że to jest Twój poprawny BASE_URL

Cypress.Commands.add('login', () => {
    return cy.api({
        method: 'POST',
        url: RENGWEB_URL + 'auth/realms/ING_MAIN/protocol/openid-connect/token',
        failOnStatusCode: false,
        body: {
            grant_type: 'password',
            username: LOGIN_USER,
            password: LOGIN_PASS
        }
    });
});

Cypress.Commands.add('rengchildinappverify', (token, tokenUniqueReferenceID) => {
    const VERIFY_PAYLOAD = {
        token: 'kod128le',
        tokenUniqueReferenceId: tokenUniqueReferenceID,
        locale: 'PL'
    };
    
    return cy.api({
        method: 'POST',
        url: RENGWEB_URL + 'api/google/child/inapp/verify',
        failOnStatusCode: false,
        headers: Utils.getHeadersWithSessionId(token), 
        body: VERIFY_PAYLOAD
    });
});

Cypress.Commands.add('rengchildinappcheck', (token, sessionId, payload) => {
    return cy.api({
        method: 'POST',
        url: RENGWEB_URL + 'api/google/child/inapp/check',
        failOnStatusCode: false,
        headers: Utils.getHeadersWithSessionId(sessionId, token),
        body: payload
    });
});



let token;
let sessionId;
const GREEN_PATH_DATA = {
    "BEAP103125": {
        "card128id": "AAc8AACDED71191F37049555CAE6B60900AAF2CD683B566801E6CCD0105F6A6D8AC9A8BCDD7C95C950922A74CBC8B823B86EF8B5CA6ED68EF13785CC6E9AC8AB",
        "wklUser": "221N100596",
        "wklOwner": "2210206900",
        "sourceUsername": "BEAP103125",
        "wkl_purpose_description": "parent for user for green path"
    }
};
const EXPECTED_ELIGIBILITY_STATUS = 'ELIGIBLE'; // Ustaw oczekiwany status

describe('API Setup and Authorization', () => {

    it('should successfully login and get token/session ID', () => {
        cy.login().then((response) => {
            expect(response.status).to.eq(200);
            token = response.body.access_token; 
            sessionId = response.body.session_state; 
            expect(token).to.not.be.undefined;
        });
    });
});

describe('Google Play Child API Verification & Check', () => {

    it('should pass inapp verification check for a valid token reference (Postman)', () => {
        const TEST_TOKEN_REF = 'DINGMC1PL000000e4f2257997334bdbdbb232f45ec7caae7';

        cy.rengchildinappverify(token, TEST_TOKEN_REF).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.status).to.eq('OK');
            expect(response.body.code).to.be.null;
        });
    });

    it('should correctly process the "parent for user for green path" data (NEW TEST)', () => {
        
        cy.rengchildinappcheck(token, sessionId, GREEN_PATH_DATA).then((response) => {
            const mainKey = Object.keys(response.body)[0];

            expect(response.status).to.eq(200);
            expect(response.body[mainKey].eligibility_status).to.eq(EXPECTED_ELIGIBILITY_STATUS);
            expect(response.body[mainKey].wklOwner).to.eq(GREEN_PATH_DATA[mainKey].wklOwner);
        });
    });
    
    it('should return an error for an invalid/non-existent tokenUniqueReferenceId (Negative)', () => {
        const INVALID_TOKEN_REF = 'INVALID_REF_12345'; 

        cy.rengchildinappverify(token, INVALID_TOKEN_REF).then((response) => {
            expect(response.status).to.eq(200); 
            expect(response.body.status).to.eq('ERROR');
            expect(response.body.code).to.not.be.null; 
        });
    });
});
