/ 2. Definicja Typu, który mapuje funkcje JS na Komendy Cypressa
type CommandFn<T extends unknown[], R> = (...args: T) => Cypress.Chainable<R>;

// 3. Typ Narzędziowy, który wyodrębnia argumenty i typ zwracany z funkcji
// Użyjemy go do każdej komendy z osobna!
type MapLoginCommand = (
    // Inferencja: Pobieramy typ argumentów funkcji 'login'
    typeof import("./santiago_commands_hce").login extends CommandFn<infer Args, infer R> 
    // Wynik: Używamy tych argumentów (Args) i typu zwracanego (R) do stworzenia nowej komendy Chainable
    ? (...args: Args) => Cypress.Chainable<R>
    : never
);
