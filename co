// Plik: report.js - POPRAWNA ZAWARTOŚĆ
// Ten plik zawiera logikę interakcji i rysowania wykresów dla raportu HTML.

/**
 * Przełącza widoczność szczegółów dla danego testcase.
 * @param {number} index - Indeks testcase'u do przełączenia.
 */
function toggleTestCase(index) {
    const testcase = document.querySelectorAll('.testcases .testcase')[index];
    const toggleButton = document.getElementById(`toggle-${index}`);

    if (testcase) {
        const isExpanded = testcase.classList.toggle('expanded');
        if (toggleButton) {
            toggleButton.textContent = isExpanded ? '-' : '+';
            toggleButton.setAttribute('aria-expanded', isExpanded.toString());
        }
    } else {
        console.error(`Element testcase o indeksie ${index} nie został znaleziony.`);
    }
}

/**
 * Inicjalizuje wszystkie funkcjonalności po załadowaniu DOM.
 */
function initializeReport() {
    console.log("Inicjalizacja raportu (report.js)...");

    // 1. Inicjalizacja filtrowania
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase().trim();
            const testcases = document.querySelectorAll('.testcases .testcase');

            testcases.forEach(testcase => {
                const name = (testcase.getAttribute('data-name') || '').toLowerCase();
                const className = (testcase.getAttribute('data-classname') || '').toLowerCase();
                if (!searchTerm || name.includes(searchTerm) || className.includes(searchTerm)) {
                    testcase.style.display = '';
                } else {
                    testcase.style.display = 'none';
                }
            });
        });
        console.log("Filtrowanie zainicjalizowane.");
    } else {
        console.warn("Element #searchInput nie znaleziony.");
    }

    // 2. Inicjalizacja zakładek
    const tabs = document.querySelectorAll('.tabs .tab');
    const tabContents = document.querySelectorAll('.container > .tab-content');

    if (tabs.length > 0 && tabContents.length > 0) {
        tabs.forEach(tab => {
            tab.addEventListener('click', function() {
                tabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));
                this.classList.add('active');
                const tabId = this.getAttribute('data-tab');
                const activeContent = document.getElementById(tabId);
                if (activeContent) {
                    activeContent.classList.add('active');
                    console.log(`Aktywowano zakładkę: ${tabId}`);
                    if (tabId === 'charts' && typeof initializeCharts === 'function' && !window.chartsInitialized) {
                        console.log("Inicjalizowanie wykresów po kliknięciu zakładki...");
                        initializeCharts();
                    }
                } else {
                    console.error(`Nie znaleziono zawartości dla zakładki ID: ${tabId}`);
                }
            });
        });
        console.log("Obsługa zakładek zainicjalizowana.");
    } else {
        console.warn("Nie znaleziono elementów zakładek lub ich zawartości.");
    }

    // 3. Inicjalizacja wykresów (jeśli zakładka 'charts' jest domyślnie aktywna)
    if (typeof Chart !== 'undefined') {
        const activeTab = document.querySelector('.tabs .tab.active');
        if (activeTab && activeTab.getAttribute('data-tab') === 'charts') {
            console.log("Inicjalizowanie wykresów przy starcie (zakładka aktywna)...");
            initializeCharts();
        }
    } else {
         console.error("Biblioteka Chart.js nie została załadowana! Wykresy nie będą działać.");
    }
}

/**
 * Inicjalizuje i rysuje wykresy Chart.js.
 */
function initializeCharts() {
     if (typeof window.reportData === 'undefined' || !window.reportData) {
         console.error("Brak danych 'window.reportData' do narysowania wykresów.");
         return;
     }
     if (typeof Chart === 'undefined'){
         console.error("Chart.js nie jest załadowane, nie można narysować wykresów.");
         return;
     }
     if (window.chartsInitialized) {
        console.log("Wykresy już zainicjalizowane.");
        return;
     }
     window.chartsInitialized = true;

     const { passFailData, responseTimeData, percentileData } = window.reportData;
     console.log("Dane dla wykresów:", window.reportData);

     try {
         // Wykres 1: Status testów (Kołowy)
         const statusCtx = document.getElementById('statusChart');
         if (statusCtx && passFailData && passFailData.length > 0) {
              new Chart(statusCtx.getContext('2d'), { /* ... konfiguracja ... */
                type: 'pie',
                data: { labels: passFailData.map(item => item.label), datasets: [{ data: passFailData.map(item => item.value), backgroundColor: passFailData.map(item => item.color), borderWidth: 1 }] },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' } } }
              });
             console.log("Narysowano wykres statusu.");
         } else if (!statusCtx) { console.warn("Nie znaleziono canvas #statusChart."); }
         else { console.log("Brak danych (niezerowych) dla wykresu statusu."); }

         // Wykres 2: Czasy odpowiedzi (Słupkowy poziomy)
         const responseTimeCtx = document.getElementById('responseTimeChart');
         if (responseTimeCtx && responseTimeData && responseTimeData.length > 0) {
              new Chart(responseTimeCtx.getContext('2d'), { /* ... konfiguracja ... */
                type: 'bar',
                data: { labels: responseTimeData.map(item => item.name), datasets: [{ label: 'Czas odpowiedzi (ms)', data: responseTimeData.map(item => item.time), backgroundColor: responseTimeData.map(item => item.color), borderWidth: 1 }] },
                options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } }, scales: { x: { beginAtZero: true, title: { display: true, text: 'Czas (ms)' } } } }
              });
             console.log("Narysowano wykres czasów odpowiedzi.");
         } else if (!responseTimeCtx) {  console.warn("Nie znaleziono canvas #responseTimeChart."); }
         else { console.log("Brak danych dla wykresu czasów odpowiedzi."); }

         // Wykres 3: Percentyle (Liniowy)
         const percentileCtx = document.getElementById('percentileChart');
         if (percentileCtx && percentileData && percentileData.length > 0) {
             new Chart(percentileCtx.getContext('2d'), { /* ... konfiguracja ... */
                type: 'line',
                data: { labels: percentileData.map(item => item.percentile + '%'), datasets: [{ label: 'Czas odpowiedzi (ms)', data: percentileData.map(item => item.value), borderColor: 'rgba(33, 150, 243, 1)', backgroundColor: 'rgba(33, 150, 243, 0.2)', borderWidth: 2, pointBackgroundColor: 'rgba(33, 150, 243, 1)', tension: 0.1, fill: true }] },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' } }, scales: { y: { beginAtZero: true, title: { display: true, text: 'Czas (ms)' } } } }
             });
             console.log("Narysowano wykres percentyli.");
         } else if (percentileCtx && (!percentileData || percentileData.length === 0)) {
             console.log("Brak danych dla wykresu percentyli.");
             const percentileContainer = percentileCtx.closest('.chart'); if(percentileContainer) percentileContainer.style.display = 'none';
         } else if (!percentileCtx && percentileData && percentileData.length > 0) { console.warn("Nie znaleziono canvas #percentileChart, mimo że dane istnieją."); }

     } catch (error) {
         console.error("Wystąpił błąd podczas inicjalizacji wykresów:", error);
         const chartArea = document.getElementById('charts'); if (chartArea) { chartArea.innerHTML = '<p style="color: red;">Wystąpił błąd podczas renderowania wykresów. Sprawdź konsolę przeglądarki.</p>'; }
     }
}

// --- Główny punkt startowy skryptu ---
window.chartsInitialized = false;
window.toggleTestCase = toggleTestCase; // Upewnij się, że jest globalna

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeReport);
} else {
    initializeReport(); // Jeśli DOM już jest gotowy
}
