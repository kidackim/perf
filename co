### Lista kroków procesu CI/CD dla testów Gatling

Oto finalna, szczegółowa lista kroków procesu CI/CD w formacie Markdown, gotowa do użycia.

---
### 1. Etap: Przygotowanie środowiska i obrazu

* **Start pipeline**: Proces jest wyzwalany automatycznie po **commicie** do repozytorium lub ręcznie w **Azure Pipelines**.
* **Budowa obrazu Docker**: Na agencie CI, na podstawie **`Dockerfile`**, tworzony jest obraz środowiska testowego.
* **Wypchnięcie obrazu do rejestru kontenerów** (Azure Container Registry lub Harbor): Obraz jest umieszczany w centralnym repozytorium.
* **Skanowanie bezpieczeństwa obrazu w rejestrze**: Automatyczna kontrola pod kątem **luk w obrazie**.
* **Eksport obrazu do pliku `.tar`**: Obraz jest zapisywany do archiwum `.tar` w agencie CI.
* **Transfer pliku `.tar` z obrazem na zdalny serwer testowy**: Przesłanie archiwum z obrazem na serwer (np. przez **SSH**).

---
### 2. Etap: Wdrożenie i uruchomienie testów

* **Pobranie sekretów z Azure Key Vault**: Bezpieczne pobranie danych potrzebnych do wykonania testów (np. hasła, klucze).
* **Na serwerze: wyszukiwanie katalogu z obrazem**: **Ansible** skanuje wskazany folder, aby znaleźć podkatalog pasujący do numeru builda lub unikalnego znaku.
* **Załaduj obraz Docker/Podman używając `podman load`**: Wczytanie obrazu z pliku `.tar` do lokalnego rejestru na serwerze.
* **Uruchom kontener w trybie detached**: Start testów Gatling wewnątrz kontenera z odpowiednimi zmiennymi środowiskowymi (np. `GATLING_USERS`).
* **Czekaj na zakończenie działania kontenera**: Operacje blokują się, aż testy zakończą się sukcesem lub błędem.
* **Skopiuj raport testów JUnit oraz inne wyniki z kontenera na zdalny serwer**: Przeniesienie plików wyników z wewnątrz kontenera na serwer.
* **Przenieś raport JUnit z serwera na agenta Azure Pipelines**: Raporty trafiają do systemu CI/CD w celu dalszego przetwarzania.
* **Globalne czyszczenie zasobów na serwerze**: Zatrzymanie i usunięcie nieużywanych kontenerów oraz obrazów.

---
### 3. Etap: Raportowanie i czyszczenie

* **Publikacja raportów JUnit w Azure DevOps**: Wyniki testów są wizualizowane i dostępne bezpośrednio w interfejsie DevOps.
* **Ustawienie statusu końcowego**: Automatyczne generowanie statusu potoku (Success / Failure) oraz koloru raportu.
* **Wysłanie e-maila z rezultatami testów i załącznikami**: Playbook Ansible **`send-test-results-mail.yml`** odpowiada za wysyłkę kompletnego podsumowania.
* **(Opcjonalnie) Czyszczenie lokalnych plików tymczasowych**: Usunięcie artefaktów powstałych podczas procesu build/deploy na agencie Azure Pipelines.
