# Dockerfile

# ... (wszystkie poprzednie instrukcje dla Stage 1: builder, aż do ARG GATLING_JS_VERSION)

# Definicja wersji Node.js do zainstalowania
ARG NODE_VERSION=18.20.1 

# Flagi kompilatora dla kompatybilności z CPU
ENV CFLAGS="-march=x86-64 -mtune=generic" \
    CXXFLAGS="-march=x86-64 -mtune=generic"

# Argumenty i Etykiety z Twojego oryginalnego Dockerfile
ARG MICRODIR=/microdir
ARG PIP_ROOT_USER_ACTION=ignore
ARG LANG=en_US.UTF-8
ARG LANGUAGE=en_US.UTF-8
ARG LC_COLLATE=C
ARG LC_CTYPE=en_US.UTF-8
ARG NLS_OS_CHARSET=AL32UTF8
ARG USE_GCLOUD_AUTH_PLUGIN=True

LABEL maintainer="ci.coding.pl"

# Ustawienie zmiennych środowiskowych
ENV PIP_ROOT_USER_ACTION=${PIP_ROOT_USER_ACTION} \
    LANG=${LANG} \
    LANGUAGE=${LANGUAGE} \
    LC_COLLATE=${LC_COLLATE} \
    LC_CTYPE=${LC_CTYPE} \
    NLS_OS_CHARSET=${NLS_OS_CHARSET} \
    NODE_TLS_REJECT_UNAUTHORIZED=0

RUN curl -sSLk "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz" \
    | tar -xJC /usr/local --strip-components=1 && \
    chmod -R 755 /usr/local/bin/node /usr/local/lib/node_modules/npm /usr/local/lib/node_modules/corepack

WORKDIR /opt/app-root/src

COPY package*.json ./

RUN npm config set strict-ssl false && \
    npm install --unsafe-perm

# Nowy krok diagnostyczny (możesz go zostawić tymczasowo, potem usunąć)
RUN echo "--- DIAGNOSTYCZNY KROK PO npm install ---" && \
    ls -lha node_modules && \
    echo "Current working directory: $(pwd)" && \
    ls -lha /opt/app-root/src/node_modules || echo "node_modules not found at /opt/app-root/src/node_modules"
# --- KONIEC DIAGNOSTYCZNEGO KROKU ---


# === NOWY KLUCZOWY KROK: POBIERANIE I INSTALOWANIE GATLING-JS-BUNDLE ===
# Bierzemy wersję z devDependencies w package.json
ARG GATLING_JS_VERSION=3.13.50 # <--- SPRAWDŹ DOKŁADNIE TĘ WERSJĘ W SWOIM package.json
ENV GATLING_JS_DOWNLOAD_URL="https://github.com/gatling/gatling-js/releases/download/v${GATLING_JS_VERSION}/gatling-js-bundle-${GATLING_JS_VERSION}-linux-x64.zip"

# Krok 1: Tylko pobierz plik ZIP (zapisz do /tmp)
RUN echo "Downloading Gatling.js Bundle..." && \
    curl -sSLk "${GATLING_JS_DOWNLOAD_URL}" -o /tmp/gatling-js-bundle.zip

# Krok 2: Sprawdź integralność pobranego pliku
RUN echo "Verifying downloaded file..." && \
    ls -lh /tmp/gatling-js-bundle.zip && \ # Wyświetl rozmiar pliku
    file /tmp/gatling-js-bundle.zip && \   # Sprawdź typ pliku (czy to faktycznie ZIP)
    unzip -t /tmp/gatling-js-bundle.zip || (echo "Downloaded ZIP is corrupted or not a ZIP file. Failing build." && exit 1) # Test integralności ZIP

# Krok 3: Jeśli plik jest OK, wtedy rozpakuj i zainstaluj
RUN echo "Extracting Gatling.js Bundle..." && \
    unzip /tmp/gatling-js-bundle.zip -d /usr/local/lib/gatling-js-bundle && \
    chmod -R 755 /usr/local/lib/gatling-js-bundle && \
    rm /tmp/gatling-js-bundle.zip && \
    echo "Installing Gatling CLI..." && \
    npx gatling install --output-file-path /usr/local/bin/gatling # Sprawdź, czy to jest właściwa komenda install

# === KONIEC NOWEGO KLUCZOWEGO KROKU ===

COPY . . # To COPY powinno być po instalacji zależności I tego frameworka

# Stage 2: Final
FROM registry.access.redhat.com/ubi8-minimal AS final # Zakładam, że ubi8-minimal, a nie ubi9-micro, zadziałało

USER root
RUN mkdir -p /app && chown 1001:0 /app
COPY --from=builder /usr/local/ /usr/local/
ENV PATH="/usr/local/bin:${PATH}" 

USER 1001
WORKDIR /app

COPY --from=builder /opt/app-root/src/node_modules ./node_modules
COPY --from=builder /opt/app-root/src/package.json .
COPY --from=builder /opt/app-root/src/sample.env .sample.env
COPY --from=builder /opt/app-root/src/. .

EXPOSE 3000

CMD ["/bin/bash", "-c", "npm run test"]
