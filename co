import { execSync } from 'child_process';
import { existsSync, readdirSync, statSync, copyFileSync, mkdirSync } from 'fs';
import path, { join, dirname, resolve as pathResolve } from 'path';
import { fileURLToPath } from 'url';

async function main() {
  // Ścieżka do katalogu z wynikami Gatling
  const GATLING_DIR = 'target/gatling';
  const resolvedTargetDirectory = pathResolve(GATLING_DIR); // Absolutna ścieżka do katalogu docelowego

  // Ustalenie ścieżki do bieżącego katalogu skryptu
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);

  console.log(`Katalog roboczy skryptu: ${process.cwd()}`);
  console.log(`Katalog skryptu: ${__dirname}`);
  console.log(`Docelowy katalog raportów: ${resolvedTargetDirectory}`);


  try {
    // --- Kopiowanie zasobów JS do katalogu docelowego ---
    console.log(`\nSprawdzanie i kopiowanie zasobów JS do: ${resolvedTargetDirectory}`);
    const reportJsSourcePath = path.join(__dirname, 'report.js');
    const chartJsSourcePath = pathResolve('node_modules/chart.js/dist/chart.umd.js');
    const reportJsDestPath = path.join(resolvedTargetDirectory, 'report.js');
    const chartJsDestPath = path.join(resolvedTargetDirectory, 'chart.umd.js');

    if (!existsSync(reportJsSourcePath)) throw new Error(`Brak pliku report.js w: ${reportJsSourcePath}`);
    if (!existsSync(chartJsSourcePath)) throw new Error(`Brak pliku chart.umd.js w: ${chartJsSourcePath}. Uruchom 'npm install'.`);

    console.log(`Tworzenie katalogu docelowego (jeśli potrzebne): ${resolvedTargetDirectory}`);
    mkdirSync(resolvedTargetDirectory, { recursive: true });

    console.log(`Kopiowanie ${reportJsSourcePath} -> ${reportJsDestPath}`);
    copyFileSync(reportJsSourcePath, reportJsDestPath);
    console.log(`Kopiowanie ${chartJsSourcePath} -> ${chartJsDestPath}`);
    copyFileSync(chartJsSourcePath, chartJsDestPath);
    console.log('Pomyślnie skopiowano zasoby JS.');
    // --- Koniec kopiowania zasobów JS ---


    // --- Wyszukiwanie najnowszych wyników Gatling ---
    if (!existsSync(GATLING_DIR)) { // Sprawdzenie formalne
        throw new Error(`Katalog ${GATLING_DIR} nie istnieje mimo próby utworzenia.`);
    }

    function findLatestDir(baseDir) { // Usunięto : string
      const dirs = readdirSync(baseDir, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory() && dirent.name.startsWith('jssimulation-'))
        .map(dirent => ({ name: dirent.name, path: join(baseDir, dirent.name), time: statSync(join(baseDir, dirent.name)).mtime.getTime() }))
        .sort((a, b) => b.time - a.time);
      return dirs.length > 0 ? dirs[0].path : null;
    }

    const LATEST_DIR = findLatestDir(GATLING_DIR);
    if (!LATEST_DIR) throw new Error(`Nie znaleziono katalogów jssimulation-* w ${GATLING_DIR}.`);
    console.log(`\nZnaleziono najnowszy katalog symulacji: ${LATEST_DIR}`);

    const STATS_FILE = join(LATEST_DIR, 'js', 'stats.js');
    if (!existsSync(STATS_FILE)) throw new Error(`Nie znaleziono pliku ${STATS_FILE}.`);
    console.log(`Znaleziono plik stats.js: ${STATS_FILE}`);
    // --- Koniec wyszukiwania wyników ---


    // --- Generowanie raportu XML ---
    const XML_BASE_NAME = 'TEST-gatling-results.xml';
    // Zmieniamy ścieżkę docelową XML na katalog target/gatling
    const resolvedXmlFile = path.join(resolvedTargetDirectory, XML_BASE_NAME);

    console.log(`\nGenerowanie raportu XML do: ${resolvedXmlFile}`);
    execSync(`node raport.mjs "${pathResolve(STATS_FILE)}" "${resolvedXmlFile}"`, { stdio: 'inherit' });

    if (!existsSync(resolvedXmlFile)) throw new Error(`Nie udało się wygenerować pliku XML: ${resolvedXmlFile}.`);
    console.log(`Raport XML został wygenerowany: ${resolvedXmlFile}`);
    // --- Koniec generowania XML ---


    // --- Generowanie raportu HTML ---
    const HTML_BASE_NAME = 'gatling-report.html';
    // Zmieniamy ścieżkę docelową HTML na katalog target/gatling
    const resolvedHtmlFile = path.join(resolvedTargetDirectory, HTML_BASE_NAME);

    // Ścieżki do JS używane wewnątrz HTML - teraz to tylko nazwy plików,
    // bo HTML i JS będą w tym samym katalogu (target/gatling)
    const chartJsHtmlPath = 'chart.umd.js';
    const reportJsHtmlPath = 'report.js';

    console.log(`\nGenerowanie raportu HTML do: ${resolvedHtmlFile}`);
    // Przekazujemy nowe ścieżki XML i HTML oraz proste nazwy plików JS
    execSync(`node tohtml.mjs "${resolvedXmlFile}" "${resolvedHtmlFile}" "${chartJsHtmlPath}" "${reportJsHtmlPath}"`, { stdio: 'inherit' });

    if (!existsSync(resolvedHtmlFile)) throw new Error(`Nie udało się wygenerować pliku HTML: ${resolvedHtmlFile}.`);
    console.log(`Raport HTML został wygenerowany: ${resolvedHtmlFile}`);
    // --- Koniec generowania HTML ---

    console.log(`\nProces zakończony pomyślnie. Wyniki w katalogu: ${resolvedTargetDirectory}`);

  } catch (error) {
    console.error('\n!!! Wystąpił błąd podczas wykonywania skryptu głównego:', error.message);
    if (error.stack) {
        console.error(error.stack);
    }
    process.exit(1);
  }
}

main();
