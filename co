// raport.mjs (główny skrypt sterujący, ten z Twojego obrazka)

import { execSync } from 'child_process';
import { existsSync, readFileSync, statSync } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname, resolve as pathResolve } from 'path';

// Importujemy naszą funkcję do konwersji
import { convertGatlingStatsToJUnitXml } from './toXml.mjs'; // Upewnij się, że nazwa pliku jest prawidłowa

const GATLING_DIR = 'target/gatling';

async function main() {
    const _filename = fileURLToPath(import.meta.url);
    const _dirname = dirname(_filename);

    console.log(`Katalog roboczy skryptu: ${process.cwd()}`);
    console.log(`Katalog skryptu: ${_dirname}`);

    const resolvedTargetDirectory = pathResolve(GATLING_DIR);
    console.log(`Docelowy katalog raportów: ${resolvedTargetDirectory}`);

    try {
        if (!existsSync(GATLING_DIR)) {
            // W przypadku, gdy katalog Gatlinga nie istnieje
            console.error(`Katalog Gatlinga "${GATLING_DIR}" nie istnieje mimo próby utworzenia.`);
            throw new Error(`Katalog "${GATLING_DIR}" nie istnieje.`);
        }

        function findLatestDir(baseDir) {
            const dirs = fs.readdirSync(baseDir, { withFileTypes: true })
                .filter(dirent => dirent.isDirectory() && dirent.name.startsWith('jssimulation-'))
                .map(dirent => ({
                    name: dirent.name,
                    path: path.join(baseDir, dirent.name),
                    mtime: statSync(path.join(baseDir, dirent.name)).mtime.getTime()
                }))
                .sort((a, b) => b.mtime - a.mtime); // Sortuj malejąco według daty modyfikacji

            return dirs.length > 0 ? dirs[0].path : null;
        }

        const LATEST_DIR = findLatestDir(GATLING_DIR);
        if (!LATEST_DIR) {
            throw new Error(`Nie znaleziono katalogów 'jssimulation-' w ${GATLING_DIR}.`);
        }
        console.log(`Znaleziono najnowszy katalog symulacji: ${LATEST_DIR}`);

        const STATS_FILE = path.join(LATEST_DIR, 'js', 'global_stats.js'); // Zmieniono z 'stats.js' na 'global_stats.js'
        if (!existsSync(STATS_FILE)) {
            throw new Error(`Nie znaleziono pliku statystyk: ${STATS_FILE}. Upewnij się, że Gatling wygenerował ten plik.`);
        }
        console.log(`Znaleziono plik stats.js: ${STATS_FILE}`);

        const XML_BASE_NAME = 'TEST-gatling-results.xml';
        const resolvedXmlFile = path.join(resolvedTargetDirectory, XML_BASE_NAME);

        console.log(`Generowanie raportu XML do: ${resolvedXmlFile}`);
        // Wywołujemy naszą funkcję do konwersji bezpośrednio
        await convertGatlingStatsToJUnitXml(STATS_FILE, resolvedXmlFile);

        if (!existsSync(resolvedXmlFile)) {
            throw new Error(`Nie udało się wygenerować pliku XML: ${resolvedXmlFile}`);
        }
        console.log(`Raport XML został wygenerowany do: ${resolvedXmlFile}`);

        // Część dotycząca HTML
        const HTML_BASE_NAME = 'index.html';
        const resolvedHtmlFile = path.join(resolvedTargetDirectory, HTML_BASE_NAME);

        console.log(`Generowanie raportu HTML do: ${resolvedHtmlFile}`);
        // Tutaj zakładałem, że masz skrypt 'toHtml.mjs', który jest w stanie to zrobić
        // Jeśli nie, ten fragment kodu nie zadziała.
        // execSync(`node toHtml.mjs "${resolvedXmlFile}" "${resolvedHtmlFile}"`, { stdio: 'inherit' });

        if (!existsSync(resolvedHtmlFile)) {
            console.warn(`Ostrzeżenie: Plik HTML "${resolvedHtmlFile}" nie został znaleziony. Może to być normalne, jeśli toHtml.mjs nie generuje pliku w tym miejscu.`);
            // throw new Error(`Nie udało się wygenerować pliku HTML: ${resolvedHtmlFile}`);
        }
        console.log(`Raport HTML został wygenerowany: ${resolvedHtmlFile}`);
        console.log(`Proces zakończony pomyślnie. Wyniki w katalogu: ${resolvedTargetDirectory}`);

    } catch (error) {
        console.error(`Wystąpił błąd podczas wykonywania skryptu głównego: ${error.message}`);
        if (error.stack) {
            console.error(error.stack);
        }
        process.exit(1);
    }
}

main();
